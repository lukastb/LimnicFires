#anova(rda.dom, by="term") #test single terms
#anova(rda.dom, by="margin")#test analyse the marginal effects when each term is eliminated from the model containing all other terms
#anova(rda.dom, by="axis") #test of individual axis
#forward selection (Blanchet et al 2008)
#"it is best to reduce number of constraints to 3-5" (vegan tutorial)
sel.fs<-forward.sel(asv1,dom1, nperm=49999, adjR2thresh = RsquareAdj(rda.dom)$adj.r.squared)
n.tests <- ncol (dom1)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs$pval, method = 'holm', n = n.tests)
sel.fs$pval.adj <- pval.adj
sel.fs
RsquareAdj(rda.dom)$adj.r.squared #total dom explains 27% (values still changing due to newly arranged dom data)
(sel.fs[,5]) #selected variables explain 9% (values still changing due to newly arranged dom data)
#RDA_ASV_DOM<-scores(rda.dom, display = "sites")
#RDA_ASV_DOM <- RDA_ASV_DOM[order(as.numeric((row.names(RDA_ASV_DOM)))), ]
#write.table(RDA_ASV_DOM,"C:/Users/thuile/PhD/Albania 04.2018/Riverdist/scores_ASV_DOM.txt", sep=",")
### rda on asv with space as constraint
common2<-common_sites(asv,aem)
asv2<-common2[[1]]
aem2<-common2[[2]]
rda.space<-myrda(asv2,aem2)
anova(rda.space)
#anova(rda.space, by="term")
#anova(rda.dom, by="margin")
#anova(rda.space, by="axis") #test of individual axis
sel.fs.sp<-forward.sel(asv2,aem2, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.space)$adj.r.squared)# use alpha 0.06 here!!!
n.tests <- ncol (aem2)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.sp$pval, method = 'holm', n = n.tests)
sel.fs.sp$pval.adj <- pval.adj
sel.fs.sp
RsquareAdj(rda.space)$adj.r.squared #total space explains 24%
(sel.fs.sp[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
### rda on asv with geology as constraint
common3<-common_sites(asv,pc_geo)
asv3<-common3[[1]]
pc_geo3<-common3[[2]]
rda.geo<-myrda(asv3,pc_geo3)
anova(rda.geo)
#anova(rda.geo, by="term")
#anova(rda.geo, by="margin")
#anova(rda.geo, by="axis") #test of individual axis
sel.fs.geo<-forward.sel(asv3,pc_geo3, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.geo)$adj.r.squared)
n.tests <- ncol (pc_geo3)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.geo$pval, method = 'holm', n = n.tests)
sel.fs.geo$pval.adj <- pval.adj
sel.fs.geo
RsquareAdj(rda.geo)$adj.r.squared
(sel.fs.geo[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
### rda on asv with algae as constraint
common4<-common_sites(asv,PC_algae)
asv4<-common4[[1]]
algae<-common4[[2]]
rda.algae<-myrda(asv4,algae)
anova(rda.algae)
#anova(rda.algae, by="term")
#anova(rda.algae, by="margin")
#anova(rda.algae, by="axis") #test of individual axis
sel.fs.algae<-forward.sel(asv4,algae, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.algae)$adj.r.squared)
n.tests <- ncol (algae)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.algae$pval, method = 'holm', n = n.tests)
sel.fs.algae$pval.adj <- pval.adj
sel.fs.algae
RsquareAdj(rda.algae)$adj.r.squared
(sel.fs.algae[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
### rda on asv with water chemistry as constraint
common5<-common_sites(asv,pc_wc)
asv5<-common5[[1]]
pc_wc5<-common5[[2]]
rda.wc<-myrda(asv5,pc_wc5)
anova(rda.wc)
sel.fs.wc<-forward.sel(asv5,pc_wc5, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.wc)$adj.r.squared) #adjR2 +0.02 fore more variables
n.tests <- ncol (pc_wc5)
pval.adj <- p.adjust (sel.fs.wc$pval, method = 'holm', n = n.tests)
sel.fs.wc$pval.adj <- pval.adj
sel.fs.wc
RsquareAdj(rda.wc)$adj.r.squared
(sel.fs.wc[,5])
### rda on asv with geo-chemistry (GEO+water chemistry) as constraint
geochem<-merge(pc_geo3, pc_wc, by="row.names") #create geo-chemistry table for var-part
rownames(geochem) <- geochem$Row.names
geochem <- geochem[,-1]
rda.gc<-myrda(asv4,geochem)
anova(rda.gc)
sel.fs.gc<-forward.sel(asv4,geochem, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.gc)$adj.r.squared) #adjR2 +0.02 fore more variables
n.tests <- ncol (geochem)
pval.adj <- p.adjust (sel.fs.gc$pval, method = 'holm', n = n.tests)
sel.fs.gc$pval.adj <- pval.adj
sel.fs.gc
RsquareAdj(rda.gc)$adj.r.squared
(sel.fs.gc[,5])
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]
varp2 <- varpart(asv_varp, space_varp, dom_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('NWS', 'DOM'), bg = c("dodgerblue3", "darkorange"), lty="blank", cutoff= -Inf, digits = 2)
#plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -0.1, digits = 1)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]; algae_varp<-algae[,sel.fs.algae$order]
varp2 <- varpart(asv_varp, dom_varp, space_varp, algae_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('DOM', 'NWS', 'Algae'), bg = c("darkorange", "dodgerblue3", "green"), lty="blank", cutoff= -Inf, digits = 2)
#plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -0.1, digits = 1)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]; geo_varp<-pc_geo3[,sel.fs.geo$order]; algae_varp<-algae[,sel.fs.algae$order]
varp2 <- varpart(asv_varp, dom_varp, space_varp, geo_varp, algae_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -Inf, digits = 2)
#plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -0.1, digits = 1)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]; wc_varp<-pc_wc5[,sel.fs.wc$order]; algae_varp<-algae[,sel.fs.algae$order]
varp2 <- varpart(asv_varp, dom_varp, space_varp, wc_varp, algae_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('DOM', 'NWS', 'WC', 'Algae'), bg = c("darkorange", "dodgerblue3", "cyan1", "green"), lty="blank", cutoff= -Inf, digits = 2)
#plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -0.1, digits = 1)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]; gc_varp<-geochem[,sel.fs.gc$order]; algae_varp<-algae[,sel.fs.algae$order]
varp2 <- varpart(asv_varp, dom_varp, space_varp, gc_varp, algae_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('DOM', 'NWS', 'GEO-chem', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -Inf, digits = 2)
#plot (varp2, Xnames = c('DOM', 'NWS', 'GEO-chem', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", digits = 2)
library(vegan)
library(packfor)
library(VennDiagram)
library(compositions)
### load enzyme ratios
rr_asv<-read.table("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/ASV_rr250_230.txt", sep=",")
sites<-as.data.frame(as.numeric(rownames(rr_asv)))
data<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/Mastersheet_Vjosa.csv", header=TRUE, check.names = FALSE, sep=",")
er_all<-data[,c(1,13:16,19:24)]
er<-merge(er_all,sites,by=1)
rownames(er)<-er$site
er<-er[,-1]#remove sites from df
er<-er[-c(15,21),]# get rid of sites with no info
#er<-er[,-10]#get rid of (NAG+Pep)/Pox
#er<-er[,-c(5,10)]#get rid of Glu/Pox and (NAG+Pep)/Pox
#er<-er[,-c(6,10)]#get rid of Pep/Pho and (NAG+Pep)/Pox
#er<-er[,-c(5,6,10)]#get rid of Glu/Pox and (NAG+Pep)/Pox  and Pep/Pho
### load random rarefied seqtab and PC_CC
rr_asv<-read.table("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/ASV_rr250_230.txt", sep=",")
length(rare_species<-which(specnumber(rr_asv,MARGIN=2)<3)) #468 species which occure in less than 3 sites
asv<-rr_asv[,-rare_species] #use this line to exclude rara species
asv<-decostand(asv, method = "hellinger")
#asv_col <- read.csv("C:/Users/thuile/PhD/Albania 04.2018/WGCNA_new/asv_col.csv")
#rownames(asv_col) <- asv_col[,1]
#asv_col <- asv_col[,-1]
PC_CC<-read.table("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/PC_CC.txt", sep=",")
#PC_CC<-PC_CC[,-28]# only loose last one, which is 0%
#PC_CC<-PC_CC[,-c(18:28)]# loose all PCs that have less than 10% SD
#PC_CC<-PC_CC[,-c(26:28)]# loose all PCs that explain less than 1% of variance, ER varpart not working because all variability is explained
#PC_CC<-PC_CC[,-c(20:28)]# keep PCs so that a total of 90% of variace in accounted for
#PC_CC<-PC_CC[,-c(24:28)]# keep PCs so that a total of 95% of variace in accounted for
#PC_CC<-PC_CC[c(1:6)]# keep only first 5 that account for ~50% of variation
#PC_CC<-PC_CC[c(1:16)]# keep PCs so that each PC explains at least 2% of variance
PC_CC<-PC_CC[c(1:10)]# keep PCs so that each PC explains at least 3% of variance
#PC_CC<-PC_CC[c(1:7)]# keep PCs so that each PC explains at least 4% of variance
### load algal community data
#asv_algae <- read.csv("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/algae_rr_asv.csv", header=TRUE, check.names = FALSE, sep=",")
#rownames(asv_algae) <- asv_algae[,1]
#asv_algae <- asv_algae[,-1]
#taxa_algae <- read.csv("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/algae_taxa.csv", header=TRUE, check.names = FALSE, sep=",")
PC_algae <- read.table("C:/Users/thuile/PhD/Albania 04.2018/Biofilm community/PC_algae.txt", sep=",")
#PC_algae <- PC_algae[,c(1:15)] #keep PC's that explain at least 1% of variance
PC_algae <- PC_algae[,c(1:8)] #keep PC's that explain at least 3% of variance
#PC_algae <- PC_algae[,c(1:5)] #PCs like Big T
### load DOM data
data1 <- read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/Mastersheet_Vjosa.csv", header=TRUE, check.names = FALSE, sep=",")
comps_raw <- read.table("C:/Users/thuile/PhD/Albania 04.2018/DOM/pf_5comp_newest2.txt", sep=",") #best solution
data2 <- merge(data1, comps_raw, by="site")
comps <- data2[,89:93] * data2$total.fluo #reverse normalization after PARAFAC
comps$site <- data2$site
comps <- comps[,c(6,1,2,3,4,5)]
#comps[,2:6] <- comps[,2:6]/data2$DOC #normalize components by DOC
rownames(data2) <- data2$site
dom <- merge(data2, comps, by=1)
rownames(dom) <- dom$site
dom <- dom[,c(39:69,94:98)]#without LC-OCD measurements
names(dom)[32:36] <- c("comp1", "comp2", "comp3", "comp4", "comp5")
# PC DOM
pc_dom <- read.table("C:/Users/thuile/PhD/Albania 04.2018/DOM/PC_DOM_newest2.txt", sep=",")
pc_dom <- pc_dom[,1:8] #keep until PC that explains at least 3%
### load AEM
#aem<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/Riverdist/aem_eig_VJ_28.csv", row.names=1)
#aem<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/Riverdist/aem_eig_VJ_all.csv", row.names=1)
#aem<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/Riverdist/aem_eig_VJ_NEW_46_old_weights.csv", row.names=1)
aem<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/Riverdist/aem_eig_VJ_NEW_46.csv", row.names=1)#produced with the new approach
### load geology and landuse data
geo<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/geology_VJ.csv", header=TRUE, check.names = FALSE, sep=",")
rownames(geo)<-geo$sc
geo<-geo[,-1]
land<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/landuse_VJ.csv", header=TRUE, check.names = FALSE, sep=",")
rownames(land)<-land$sc
land<-land[,-1]
pc_geo <- read.table("C:/Users/thuile/PhD/Albania 04.2018/General/PC_G.txt", sep=",")
#pc_geo <- pc_geo[,1:7] #keep PCs that explain at least 1% of variance
pc_geo <- pc_geo[,1:5] #keep PCs that explain at least 3% of variance
### load pigment data (only for adding Chla to dom4 in RDA with ERs; PC_CC, DOM and space as constraints)
pigs<-read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/biomass_VJ.csv", sep=",", header = T)
rownames(pigs)<-pigs$X
pigs1<-merge(pigs,sites,by=1)
rownames(pigs1)<-pigs1$X
pigs<-pigs1[,-1]
### load water chemistry data
wc <- read.csv("C:/Users/thuile/PhD/Albania 04.2018/General/water_chemistry_new.csv", sep=",", header = T, row.names = 1)
wc <- wc[,-c(10,12,13)] #remove rows with NA
wc$new_temps <- scale(wc$new_temps, center = TRUE, scale = TRUE) # z-standardize water temp
wc[,1:10] <- log(wc[,1:10])
pca_wc <- prcomp(na.omit(wc), center = TRUE, scale = TRUE)
summary(pca_wc)
pc_wc <- pca_wc$x
pc_wc <- pc_wc[,1:4] # explain at least 3% of variability
#####function which takes two to three data frames as input and looks for common sites#####
# output is list with input dataframes reduced to common sites
common_sites<-function(respo,expl1,expl2="NA"){
expl1<-na.omit(expl1); respo1<-na.omit(respo)
bothframes<-merge(expl1,respo1, by="row.names")
rownames_co<-bothframes[,1]
bothframes<-bothframes[,-1]
rownames(bothframes)<-rownames_co
expl1_co<-bothframes[,1:length(colnames(expl1))]
respo_co<-bothframes[,(length(colnames(expl1))+1):dim(bothframes)[2]]
rownames(expl1_co)<-rownames_co ; rownames(respo_co)<-rownames_co
if(length(expl2)==1)   return(list(respo_co,expl1_co))
if(length(expl2)>1){
expl2<-na.omit(expl2)
threeframes<-merge(bothframes, expl2, by="row.names")
rownames_co<-threeframes[,1]
threeframes<-threeframes[,-1]
expl1_co<-threeframes[,1:length(colnames(expl1))]
respo_co<-threeframes[,(length(colnames(expl1))+1):dim(bothframes)[2]]
rownames(expl1_co)<-rownames_co ; rownames(respo_co)<-rownames_co
expl2_co<-threeframes[,(dim(bothframes)[2]+1):dim(threeframes)[2]]
rownames(expl2_co)<-rownames_co
return(list(respo_co,expl1_co,expl2_co))
}
}
### functions which calculates RDA/CCA of two data frames
myrda<-function(respo,expl1){
common<-common_sites(respo,expl1)
rda.func<-rda(common[[1]] ~ . , common[[2]])
plot(rda.func)
return(rda.func)
}
mycca<-function(respo,expl1){
common<-common_sites(respo,expl1)
cca.func<-cca(common[[1]] ~ . , common[[2]])
plot(cca.func)
return(cca.func)
}
dom1<-dom[,c(1,13,14,15,16,25,27,29,32:36)] #same variables as in ER var part. I use this, as I'd like to not use SUVA(HLS)
#dom1<-pc_dom
common<-common_sites(asv,dom1)
asv1<-common[[1]]
dom1<-common[[2]]
rda.dom<-myrda(asv1,dom1)
anova(rda.dom) #test full model; use only if significant
sel.fs<-forward.sel(asv1,dom1, nperm=49999, adjR2thresh = RsquareAdj(rda.dom)$adj.r.squared)
n.tests <- ncol (dom1)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs$pval, method = 'holm', n = n.tests)
sel.fs$pval.adj <- pval.adj
sel.fs
RsquareAdj(rda.dom)$adj.r.squared #total dom explains 27% (values still changing due to newly arranged dom data)
(sel.fs[,5]) #selected variables explain 9% (values still changing due to newly arranged dom data)
View(dom1)
View(dom1)
common2<-common_sites(asv,aem)
asv2<-common2[[1]]
aem2<-common2[[2]]
rda.space<-myrda(asv2,aem2)
anova(rda.space)
#anova(rda.space, by="term")
#anova(rda.dom, by="margin")
#anova(rda.space, by="axis") #test of individual axis
sel.fs.sp<-forward.sel(asv2,aem2, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.space)$adj.r.squared)# use alpha 0.06 here!!!
n.tests <- ncol (aem2)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.sp$pval, method = 'holm', n = n.tests)
sel.fs.sp$pval.adj <- pval.adj
sel.fs.sp
RsquareAdj(rda.space)$adj.r.squared #total space explains 24%
(sel.fs.sp[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]
varp2 <- varpart(asv_varp, space_varp, dom_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('NWS', 'DOM'), bg = c("dodgerblue3", "darkorange"), lty="blank", cutoff= -Inf, digits = 2)
common3<-common_sites(asv,pc_geo)
asv3<-common3[[1]]
pc_geo3<-common3[[2]]
rda.geo<-myrda(asv3,pc_geo3)
anova(rda.geo)
#anova(rda.geo, by="term")
#anova(rda.geo, by="margin")
#anova(rda.geo, by="axis") #test of individual axis
sel.fs.geo<-forward.sel(asv3,pc_geo3, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.geo)$adj.r.squared)
n.tests <- ncol (pc_geo3)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.geo$pval, method = 'holm', n = n.tests)
sel.fs.geo$pval.adj <- pval.adj
sel.fs.geo
RsquareAdj(rda.geo)$adj.r.squared
(sel.fs.geo[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
common4<-common_sites(asv,PC_algae)
asv4<-common4[[1]]
algae<-common4[[2]]
rda.algae<-myrda(asv4,algae)
anova(rda.algae)
#anova(rda.algae, by="term")
#anova(rda.algae, by="margin")
#anova(rda.algae, by="axis") #test of individual axis
sel.fs.algae<-forward.sel(asv4,algae, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.algae)$adj.r.squared)
n.tests <- ncol (algae)  # number of tests equals to number of all variables from which is being selected
pval.adj <- p.adjust (sel.fs.algae$pval, method = 'holm', n = n.tests)
sel.fs.algae$pval.adj <- pval.adj
sel.fs.algae
RsquareAdj(rda.algae)$adj.r.squared
(sel.fs.algae[,5]) #selected variables 18% (with disance as weights) and 15% (with retention time as weights)
asv_varp<-asv1; dom_varp<-dom1[,sel.fs$order]; space_varp<-aem2[,sel.fs.sp$order]; geo_varp<-pc_geo3[,sel.fs.geo$order]; algae_varp<-algae[,sel.fs.algae$order]
varp2 <- varpart(asv_varp, dom_varp, space_varp, geo_varp, algae_varp)
# Venn diagramm simple
layout(1)
plot (varp2, Xnames = c('DOM', 'NWS', 'GEO', 'Algae'), bg = c("darkorange", "dodgerblue3", "burlywood3", "green"), lty="blank", cutoff= -Inf, digits = 2)
#
common5<-common_sites(asv,pc_wc)
asv5<-common5[[1]]
pc_wc5<-common5[[2]]
rda.wc<-myrda(asv5,pc_wc5)
anova(rda.wc)
sel.fs.wc<-forward.sel(asv5,pc_wc5, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.wc)$adj.r.squared) #adjR2 +0.02 fore more variables
n.tests <- ncol (pc_wc5)
pval.adj <- p.adjust (sel.fs.wc$pval, method = 'holm', n = n.tests)
sel.fs.wc$pval.adj <- pval.adj
sel.fs.wc
RsquareAdj(rda.wc)$adj.r.squared
(sel.fs.wc[,5])
### rda on asv with geo-chemistry (GEO+water chemistry) as constraint
geochem<-merge(pc_geo3, pc_wc, by="row.names") #create geo-chemistry table for var-part
rownames(geochem) <- geochem$Row.names
geochem <- geochem[,-1]
rda.gc<-myrda(asv4,geochem)
anova(rda.gc)
sel.fs.gc<-forward.sel(asv4,geochem, nperm=49999, alpha = 0.05, adjR2thresh = RsquareAdj(rda.gc)$adj.r.squared) #adjR2 +0.02 fore more variables
n.tests <- ncol (geochem)
pval.adj <- p.adjust (sel.fs.gc$pval, method = 'holm', n = n.tests)
sel.fs.gc$pval.adj <- pval.adj
sel.fs.gc
RsquareAdj(rda.gc)$adj.r.squared
(sel.fs.gc[,5])
library(data.table)
library(tidyr)
library(rstan)
library(bayesplot)
library(vioplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
setwd("C:/Users/Thuile/PhD/Github/LimnicFires") # set working directory to where the folder"LimnicFires" containing the folders "data" and "code" is
#####fit SUVA254#####
# organize data
dom_dat <- fread("data/DOM.txt")
dom_dat[["V1"]] = NULL # drop unneeded row numbers
# flume names should be unique
dom_dat[, flume := factor(paste(flume, treat, sep="_"))]
# extract SUVA data only and make data wide
suva_wide = dcast(dom_dat, treat + flume ~ time, value.var="SUVA254")
# make df tall
suva_tall <- melt(dom_dat, id.vars = c("treat", "flume", "time"), measure.vars = "SUVA254")
# create stan data
stan_dat_suva = list(
n_flumes = nrow(suva_wide),
n_time = ncol(suva_wide) - 2,
times = as.integer(colnames(suva_wide)[-c(1,2)]),
treatment = ifelse(grepl("T", suva_wide$flume), 1, 0),
y = as.matrix(suva_wide[,-c(1,2)])
)
# autoregressive model
fit_gp = stan("code/ar1_gp.stan", data = stan_dat_suva, iter=10000, control=list(adapt_delta = 0.95))
parnames = c("rho", "a_gp", "sigma", "alpha", "beta")
samps = as.array(fit_gp, pars = parnames)
# some diagnostics
mcmc_trace(samps)
mcmc_dens_overlay(samps)
# show results from fit_gp
ci_disp = function(x, digits = 3, lower = 0.05, upper = 0.95) {
paste0(round(median(x), digits), " (",
round(quantile(x, lower), digits), ", ",
round(quantile(x, upper), digits), ")"
)
}
s1 = rstan::extract(fit_gp, c("alpha", "beta"))
matrix(sapply(s1, ci_disp, digits = 3), nrow = 2,
dimnames = list(c("alpha", "beta"), "GP")) # the beta here is the average effect size!
params1 = as.matrix(fit_gp, pars = c('alpha', 'beta'))
plotting1 = data.frame(type = c('treatment', 'control'))
params1[,2] = params1[,1] + params1[,2]
plotting1 = data.frame(type = c('control', 'treatment'), median = apply(params1, 2, median), lower = apply(params1, 2, quantile, 0.05), upper = apply(params1, 2, quantile, 0.95))
# plot raw data and model results
x11(width = 20, height = 10)
# create layout for one big and one small plot
layout(matrix(c(1,1,2,1,1,2), nrow=2, ncol=3, byrow=TRUE))
# 1st plot
par(mar=c(6,10,3,0)) # sets the bottom, left, top and right margins
vioplot(suva_tall$value ~ suva_tall$treat + suva_tall$time, pchMed=19, col=rep(c("gray90", "gray50"), 6), ylim=c(min(suva_tall$value),max(suva_tall$value)), xlab="", ylab="", yaxt="n",
cex=2, cex.axis=2, cex.lab=2, cex.names=2, at=c(1,2,3.5,4.5,6,7,8.5,9.5,11,12,13.5,14.5)) # if C and T in plot command use this: names=rep(c("C", "T"), 6)
axis(side=2, at=c(3, 4, 5, 6, 7), labels = T, cex.axis=3) #y-axis
axis(side=1, at=c(1.5, 4, 6.5, 9, 11.5, 14), labels = c("1", "2", "3", "4", "6", "8"), cex.axis=3, line=0, padj = 0.75) #x-axis
mtext(expression(SUVA[254]~(L~m^-1~mg^-1)), side=2, line=6, cex=2)
mtext(side=2, at=max(suva_tall$value)*1.03, "(a)", cex=2, las=1, adj=2.5)
mtext("Time (h)", side=1, line=4.5, cex=2)
#mtext(c("1", "2", "3", "4", "6", "8"), side=1, line=2.5, cex=1.3, at=c(1.5, 4, 6.5, 9, 11.5, 14))
legend(0.2,7, legend=c("Control", "Treatment"), pch=c(22, 22), pt.bg=c("gray90", "gray50"), bty="n", cex=3)
# 2nd plot
par(mar=c(6,7,4,0)) # sets the bottom, left, top and right margins
plot(1:2, plotting1$median, xlim=c(0,3), ylim=c(round(min(plotting1$lower)), round(max(plotting1$upper))), xaxt='n', yaxt='n', xlab='', bty='n', ylab="", pch=c(21,21), bg=c("grey90", "grey50"), cex=3)
segments(c(1,2), plotting1$lower, y1 = plotting1$upper, lwd=c(1.3, 1.3))
axis(1, at=c(1,2), labels=c('', ''), cex=2, cex.lab=2, cex.axis=3)
axis(2, line=-5, cex=2, cex.lab=2, cex.axis=3)
mtext(c("Control", "Treatment"), at=c(1,2), side=1, line=2.5, cex=2)
mtext(side=2, at=max(plotting1$upper)*1.025, "(b)", cex=2, las=1, adj=1)
round(min(plotting1$lower), digits = 1)
x11(width = 20, height = 10)
# create layout for one big and one small plot
layout(matrix(c(1,1,2,1,1,2), nrow=2, ncol=3, byrow=TRUE))
# 1st plot
par(mar=c(6,10,3,0)) # sets the bottom, left, top and right margins
vioplot(suva_tall$value ~ suva_tall$treat + suva_tall$time, pchMed=19, col=rep(c("gray90", "gray50"), 6), ylim=c(min(suva_tall$value),max(suva_tall$value)), xlab="", ylab="", yaxt="n",
cex=2, cex.axis=2, cex.lab=2, cex.names=2, at=c(1,2,3.5,4.5,6,7,8.5,9.5,11,12,13.5,14.5)) # if C and T in plot command use this: names=rep(c("C", "T"), 6)
axis(side=2, at=c(3, 4, 5, 6, 7), labels = T, cex.axis=3) #y-axis
axis(side=1, at=c(1.5, 4, 6.5, 9, 11.5, 14), labels = c("1", "2", "3", "4", "6", "8"), cex.axis=3, line=0, padj = 0.75) #x-axis
mtext(expression(SUVA[254]~(L~m^-1~mg^-1)), side=2, line=6, cex=2)
mtext(side=2, at=max(suva_tall$value)*1.03, "(a)", cex=2, las=1, adj=2.5)
mtext("Time (h)", side=1, line=4.5, cex=2)
#mtext(c("1", "2", "3", "4", "6", "8"), side=1, line=2.5, cex=1.3, at=c(1.5, 4, 6.5, 9, 11.5, 14))
legend(0.2,7, legend=c("Control", "Treatment"), pch=c(22, 22), pt.bg=c("gray90", "gray50"), bty="n", cex=3)
# 2nd plot
par(mar=c(6,7,4,0)) # sets the bottom, left, top and right margins
plot(1:2, plotting1$median, xlim=c(0,3), ylim=c(round(min(plotting1$lower), digits = 1), round(max(plotting1$upper), digits = 1)), xaxt='n', yaxt='n', xlab='', bty='n', ylab="", pch=c(21,21), bg=c("grey90", "grey50"), cex=3)
segments(c(1,2), plotting1$lower, y1 = plotting1$upper, lwd=c(1.3, 1.3))
axis(1, at=c(1,2), labels=c('', ''), cex=2, cex.lab=2, cex.axis=3)
axis(2, line=-5, cex=2, cex.lab=2, cex.axis=3)
mtext(c("Control", "Treatment"), at=c(1,2), side=1, line=2.5, cex=2)
mtext(side=2, at=max(plotting1$upper)*1.025, "(b)", cex=2, las=1, adj=1)
round(min(plotting1$lower), digits = 1)
x11(width = 20, height = 10)
# create layout for one big and one small plot
layout(matrix(c(1,1,2,1,1,2), nrow=2, ncol=3, byrow=TRUE))
# 1st plot
par(mar=c(6,10,3,0)) # sets the bottom, left, top and right margins
vioplot(suva_tall$value ~ suva_tall$treat + suva_tall$time, pchMed=19, col=rep(c("gray90", "gray50"), 6), ylim=c(min(suva_tall$value),max(suva_tall$value)), xlab="", ylab="", yaxt="n",
cex=2, cex.axis=2, cex.lab=2, cex.names=2, at=c(1,2,3.5,4.5,6,7,8.5,9.5,11,12,13.5,14.5)) # if C and T in plot command use this: names=rep(c("C", "T"), 6)
axis(side=2, at=c(3, 4, 5, 6, 7), labels = T, cex.axis=3) #y-axis
axis(side=1, at=c(1.5, 4, 6.5, 9, 11.5, 14), labels = c("1", "2", "3", "4", "6", "8"), cex.axis=3, line=0, padj = 0.75) #x-axis
mtext(expression(SUVA[254]~(L~m^-1~mg^-1)), side=2, line=6, cex=2)
mtext(side=2, at=max(suva_tall$value)*1.03, "(a)", cex=2, las=1, adj=2.5)
mtext("Time (h)", side=1, line=4.5, cex=2)
#mtext(c("1", "2", "3", "4", "6", "8"), side=1, line=2.5, cex=1.3, at=c(1.5, 4, 6.5, 9, 11.5, 14))
legend(0.2,7, legend=c("Control", "Treatment"), pch=c(22, 22), pt.bg=c("gray90", "gray50"), bty="n", cex=3)
# 2nd plot
par(mar=c(6,7,4,0)) # sets the bottom, left, top and right margins
plot(1:2, plotting1$median, xlim=c(0,3), ylim=c(round(min(plotting1$lower), digits = 1)-0.1, round(max(plotting1$upper), digits = 1)), xaxt='n', yaxt='n', xlab='', bty='n', ylab="", pch=c(21,21), bg=c("grey90", "grey50"), cex=3)
segments(c(1,2), plotting1$lower, y1 = plotting1$upper, lwd=c(1.3, 1.3))
axis(1, at=c(1,2), labels=c('', ''), cex=2, cex.lab=2, cex.axis=3)
axis(2, line=-5, cex=2, cex.lab=2, cex.axis=3)
mtext(c("Control", "Treatment"), at=c(1,2), side=1, line=2.5, cex=2)
mtext(side=2, at=max(plotting1$upper)*1.025, "(b)", cex=2, las=1, adj=1)
x11(width = 20, height = 10)
# create layout for one big and one small plot
layout(matrix(c(1,1,2,1,1,2), nrow=2, ncol=3, byrow=TRUE))
# 1st plot
par(mar=c(6,10,3,0)) # sets the bottom, left, top and right margins
vioplot(suva_tall$value ~ suva_tall$treat + suva_tall$time, pchMed=19, col=rep(c("gray90", "gray50"), 6), ylim=c(min(suva_tall$value),max(suva_tall$value)), xlab="", ylab="", yaxt="n",
cex=2, cex.axis=2, cex.lab=2, cex.names=2, at=c(1,2,3.5,4.5,6,7,8.5,9.5,11,12,13.5,14.5)) # if C and T in plot command use this: names=rep(c("C", "T"), 6)
axis(side=2, at=c(2, 3, 4, 5), labels = T, cex.axis=3) #y-axis
axis(side=1, at=c(1.5, 4, 6.5, 9, 11.5, 14), labels = c("1", "2", "3", "4", "6", "8"), cex.axis=3, line=0, padj = 0.75) #x-axis
mtext(expression(SUVA[254]~(L~m^-1~mg^-1)), side=2, line=6, cex=2)
mtext(side=2, at=max(suva_tall$value)*1.03, "(a)", cex=2, las=1, adj=2.5)
mtext("Time (h)", side=1, line=4.5, cex=2)
#mtext(c("1", "2", "3", "4", "6", "8"), side=1, line=2.5, cex=1.3, at=c(1.5, 4, 6.5, 9, 11.5, 14))
legend(0.2,7, legend=c("Control", "Treatment"), pch=c(22, 22), pt.bg=c("gray90", "gray50"), bty="n", cex=3)
# 2nd plot
par(mar=c(6,7,4,0)) # sets the bottom, left, top and right margins
plot(1:2, plotting1$median, xlim=c(0,3), ylim=c(round(min(plotting1$lower), digits = 1)-0.1, round(max(plotting1$upper), digits = 1)), xaxt='n', yaxt='n', xlab='', bty='n', ylab="", pch=c(21,21), bg=c("grey90", "grey50"), cex=3)
segments(c(1,2), plotting1$lower, y1 = plotting1$upper, lwd=c(1.3, 1.3))
axis(1, at=c(1,2), labels=c('', ''), cex=2, cex.lab=2, cex.axis=3)
axis(2, line=-5, cex=2, cex.lab=2, cex.axis=3)
mtext(c("Control", "Treatment"), at=c(1,2), side=1, line=2.5, cex=2)
mtext(side=2, at=max(plotting1$upper)*1.025, "(b)", cex=2, las=1, adj=1)
max(plotting1$upper)*1.025
mtext(side=2, at=max(plotting1$upper)*1.015, "(b)", cex=2, las=1, adj=1)
mtext(side=2, at=max(plotting1$upper)*1.005, "(b)", cex=2, las=1, adj=1)
mtext(side=2, at=max(plotting1$upper)*1.0075, "(b)", cex=2, las=1, adj=1)
x11(width = 20, height = 10)
# create layout for one big and one small plot
layout(matrix(c(1,1,2,1,1,2), nrow=2, ncol=3, byrow=TRUE))
# 1st plot
par(mar=c(6,10,3,0)) # sets the bottom, left, top and right margins
vioplot(suva_tall$value ~ suva_tall$treat + suva_tall$time, pchMed=19, col=rep(c("gray90", "gray50"), 6), ylim=c(min(suva_tall$value),max(suva_tall$value)), xlab="", ylab="", yaxt="n",
cex=2, cex.axis=2, cex.lab=2, cex.names=2, at=c(1,2,3.5,4.5,6,7,8.5,9.5,11,12,13.5,14.5)) # if C and T in plot command use this: names=rep(c("C", "T"), 6)
axis(side=2, at=c(2, 3, 4), labels = T, cex.axis=3) #y-axis
axis(side=1, at=c(1.5, 4, 6.5, 9, 11.5, 14), labels = c("1", "2", "3", "4", "6", "8"), cex.axis=3, line=0, padj = 0.75) #x-axis
mtext(expression(SUVA[254]~(L~m^-1~mg^-1)), side=2, line=5, cex=2)
mtext(side=2, at=max(suva_tall$value)*1.03, "(a)", cex=2, las=1, adj=2.5)
mtext("Time (h)", side=1, line=4.5, cex=2)
#mtext(c("1", "2", "3", "4", "6", "8"), side=1, line=2.5, cex=1.3, at=c(1.5, 4, 6.5, 9, 11.5, 14))
legend(0.2,7, legend=c("Control", "Treatment"), pch=c(22, 22), pt.bg=c("gray90", "gray50"), bty="n", cex=3)
# 2nd plot
par(mar=c(6,7,4,0)) # sets the bottom, left, top and right margins
plot(1:2, plotting1$median, xlim=c(0,3), ylim=c(round(min(plotting1$lower), digits = 1)-0.1, round(max(plotting1$upper), digits = 1)), xaxt='n', yaxt='n', xlab='', bty='n', ylab="", pch=c(21,21), bg=c("grey90", "grey50"), cex=3)
segments(c(1,2), plotting1$lower, y1 = plotting1$upper, lwd=c(1.3, 1.3))
axis(1, at=c(1,2), labels=c('', ''), cex=2, cex.lab=2, cex.axis=3)
axis(2, line=-5, cex=2, cex.lab=2, cex.axis=3)
mtext(c("Control", "Treatment"), at=c(1,2), side=1, line=2.5, cex=2)
mtext(side=2, at=max(plotting1$upper)*1.0075, "(b)", cex=2, las=1, adj=1)
#####fit parafac comps#####
# organize data
# data <- read.table("C:/Users/Thuile/PhD/LimnicFires/PARAFAC/parafac_results/4comps_6_outliers_removed/comps_rev.txt", sep=",", header=T) #new results where 6 outliers were removed and norm reversed
data <- read.table("C:/Users/Thuile/PhD/LimnicFires/PARAFAC/parafac_results/4comps_6_outliers_removed_new/comps_rev.txt", sep=",", header=T) #newest results where 6 outliers were removed and norm reversed; openfluor.txt ok
